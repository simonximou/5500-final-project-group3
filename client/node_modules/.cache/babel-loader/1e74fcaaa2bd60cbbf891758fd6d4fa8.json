{"ast":null,"code":"var _jsxFileName = \"/Users/cren_neu/Documents/NEU/Courses/Spring_2023/CS5500/Final_project/repo/5500-final-project-group3/client/src/components/feed/Feed.jsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport Post from \"../post/Post\";\nimport Share from \"../share/Share\";\nimport \"./feed.css\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\n\n// The Feed component is shared by two other components.\n// If Feed is rendered in 'Post page', then it only renders the posts posted by current user\n// If Feed is rendered in Detail component, then is renders the posts posted by the current user and other users\n// who have the same constellation as the current user.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Feed(_ref) {\n  _s();\n  let {\n    username,\n    constellation = \"\",\n    post = true\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  const {\n    user\n  } = useContext(AuthContext); // user is the current loggedin user\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      if (constellation != \"\") {\n        // If the constellation is not empty, it means we are at Search page\n        // We fetch all the posts from users who have the same constellation as the current user.\n        const res = await axios.get(\"/posts/\" + constellation);\n        setPosts(res.data);\n      } else {\n        // If the constellation if empty, it means we are at the Post page (note: Post page is a place we render the posts of the current user)\n        // We fetch all the posts of the current user from the backend api\n        const res = username ? await axios.get(\"/posts/profile/\" + username) : await axios.get(\"/posts/timeline/\" + user._id);\n        setPosts(res.data.sort((post1, post2) => {\n          return new Date(post2.createdAt) - new Date(post1.createdAt);\n        }));\n      }\n    };\n    fetchPosts();\n  }, [username, user._id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedWrapper\",\n      children: [(!username || username === user.username) && post == true && /*#__PURE__*/_jsxDEV(Share, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 71\n      }, this), posts.map(p => /*#__PURE__*/_jsxDEV(Post, {\n        post: p\n      }, p._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(Feed, \"omHF6PJyNAaQxhbtLbXyaS78q/s=\");\n_c = Feed;\nvar _c;\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"names":["useContext","useEffect","useState","Post","Share","axios","AuthContext","jsxDEV","_jsxDEV","Feed","_ref","_s","username","constellation","post","posts","setPosts","user","fetchPosts","res","get","data","_id","sort","post1","post2","Date","createdAt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","p","_c","$RefreshReg$"],"sources":["/Users/cren_neu/Documents/NEU/Courses/Spring_2023/CS5500/Final_project/repo/5500-final-project-group3/client/src/components/feed/Feed.jsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport Post from \"../post/Post\";\nimport Share from \"../share/Share\";\nimport \"./feed.css\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../context/AuthContext\";\n\n// The Feed component is shared by two other components.\n// If Feed is rendered in 'Post page', then it only renders the posts posted by current user\n// If Feed is rendered in Detail component, then is renders the posts posted by the current user and other users\n// who have the same constellation as the current user.\nexport default function Feed({ username, constellation = \"\", post = true }) {\n  const [posts, setPosts] = useState([]);\n  const { user } = useContext(AuthContext); // user is the current loggedin user\n  \n  useEffect(() => {\n    const fetchPosts = async () => {\n      if (constellation != \"\") { // If the constellation is not empty, it means we are at Search page\n        // We fetch all the posts from users who have the same constellation as the current user.\n        const res = await axios.get(\"/posts/\" + constellation);\n        setPosts(res.data);\n      } else {\n        // If the constellation if empty, it means we are at the Post page (note: Post page is a place we render the posts of the current user)\n        // We fetch all the posts of the current user from the backend api\n        const res = username\n          ? await axios.get(\"/posts/profile/\" + username)\n          : await axios.get(\"/posts/timeline/\" + user._id);\n        setPosts(\n          res.data.sort((post1, post2) => {\n            return new Date(post2.createdAt) - new Date(post1.createdAt);\n          })\n        );\n      }\n    };\n    fetchPosts();\n  }, [username, user._id]);\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feedWrapper\">\n        {/*If we are post page, we render a <Share /> component, which allows the user to add a post*/}\n        {(!username || username === user.username) && post == true && <Share />}\n        {posts.map((p) => (\n          <Post key={p._id} post={p} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAO,YAAY;AACnB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,2BAA2B;;AAEvD;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,IAAIA,CAAAC,IAAA,EAAgD;EAAAC,EAAA;EAAA,IAA/C;IAAEC,QAAQ;IAAEC,aAAa,GAAG,EAAE;IAAEC,IAAI,GAAG;EAAK,CAAC,GAAAJ,IAAA;EACxE,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEe;EAAK,CAAC,GAAGjB,UAAU,CAACM,WAAW,CAAC,CAAC,CAAC;;EAE1CL,SAAS,CAAC,MAAM;IACd,MAAMiB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAIL,aAAa,IAAI,EAAE,EAAE;QAAE;QACzB;QACA,MAAMM,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,SAAS,GAAGP,aAAa,CAAC;QACtDG,QAAQ,CAACG,GAAG,CAACE,IAAI,CAAC;MACpB,CAAC,MAAM;QACL;QACA;QACA,MAAMF,GAAG,GAAGP,QAAQ,GAChB,MAAMP,KAAK,CAACe,GAAG,CAAC,iBAAiB,GAAGR,QAAQ,CAAC,GAC7C,MAAMP,KAAK,CAACe,GAAG,CAAC,kBAAkB,GAAGH,IAAI,CAACK,GAAG,CAAC;QAClDN,QAAQ,CACNG,GAAG,CAACE,IAAI,CAACE,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;UAC9B,OAAO,IAAIC,IAAI,CAACD,KAAK,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,KAAK,CAACG,SAAS,CAAC;QAC9D,CAAC,CAAC,CACH;MACH;IACF,CAAC;IACDT,UAAU,EAAE;EACd,CAAC,EAAE,CAACN,QAAQ,EAAEK,IAAI,CAACK,GAAG,CAAC,CAAC;EAExB,oBACEd,OAAA;IAAKoB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBrB,OAAA;MAAKoB,SAAS,EAAC,aAAa;MAAAC,QAAA,GAEzB,CAAC,CAACjB,QAAQ,IAAIA,QAAQ,KAAKK,IAAI,CAACL,QAAQ,KAAKE,IAAI,IAAI,IAAI,iBAAIN,OAAA,CAACJ,KAAK;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,EACtElB,KAAK,CAACmB,GAAG,CAAEC,CAAC,iBACX3B,OAAA,CAACL,IAAI;QAAaW,IAAI,EAAEqB;MAAE,GAAfA,CAAC,CAACb,GAAG;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACtB,EAAA,CArCuBF,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}